
#version 450

#include "hdr_utility.glsl"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0, rgba32f) uniform readonly image2D inTexture;
layout(binding = 1, rgba32f) uniform writeonly image2D outTexture;

layout(push_constant) uniform constants
{
	uint mipLevel;
} data;

// Returns a bilinearly-filtered sample at the specified texel position (UV), weighted
// according to the kernel and offset in some direction
vec3 BilinearSample(uvec2 uv, ivec2 offset)
{
	ivec2 uv_i = ivec2(uv);

	vec3 TL = imageLoad(inTexture, uv_i + ivec2(-1.0, -1.0) + offset).rgb; // top left
	vec3 TR = imageLoad(inTexture, uv_i + ivec2( 1.0, -1.0) + offset).rgb; // top right
	vec3 BL = imageLoad(inTexture, uv_i + ivec2(-1.0,  1.0) + offset).rgb; // bottom left
	vec3 BR = imageLoad(inTexture, uv_i + ivec2( 1.0,  1.0) + offset).rgb; // bottom right

	return ((TL + TR + BL + BR) * 0.25);
}

//
// Bloom implementation based on CoD Advanced Warfare:
// https://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare/
//
void main()
{
	ivec2 upperImageSize = imageSize(inTexture);
	ivec2 lowerImageSize = imageSize(outTexture);

	uvec2 lower = gl_GlobalInvocationID.xy;
	vec2 uv = vec2(lower / vec2(lowerImageSize));

	uvec2 upper = uvec2(upperImageSize * uv);

	// These bilinear samples are weighted according to their offset. The central sample is the most important,
	// receiving a weight of 0.5 while the other 4 samples receive a weight of 0.125
	vec3 CTR = BilinearSample(upper, ivec2( 0.0,  0.0)) * 0.5  ; // central sample (no offset)
	vec3 TL  = BilinearSample(upper, ivec2(-1.0, -1.0)) * 0.125; // top-left sample
	vec3 TR  = BilinearSample(upper, ivec2( 1.0, -1.0)) * 0.125; // top-right sample
	vec3 BL  = BilinearSample(upper, ivec2(-1.0,  1.0)) * 0.125; // bottom-left sample
	vec3 BR  = BilinearSample(upper, ivec2( 1.0,  1.0)) * 0.125; // bottom-right sample

	// Calculate the Karis average on each of the H(4x4) boxes just for mip 0 to mip 1 downscale
	// Refer to: http://graphicrants.blogspot.com/2013/12/tone-mapping.html
	switch(data.mipLevel)
	{
	case 0:
		CTR *= 1.0 / (1.0 + (Luma(CTR) * 0.25));
		TL  *= 1.0 / (1.0 + (Luma(TL ) * 0.25));
		TR  *= 1.0 / (1.0 + (Luma(TR ) * 0.25));
		BL  *= 1.0 / (1.0 + (Luma(BL ) * 0.25));
		BR  *= 1.0 / (1.0 + (Luma(BR ) * 0.25));
		break;
	}

	vec3 sampleAverage = (CTR + TL + TR + BL + BR);

	// Clamp value to EPSILON to prevent black pixels from taking over after multiple downscale passes
	sampleAverage = max(sampleAverage, 0.0001f);

	imageStore(outTexture, ivec2(lower), vec4(sampleAverage, 1.0));
}