
#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0, rgba32f) uniform readonly image2D inPrevUpscaledTexture;
layout(binding = 1, rgba32f) uniform readonly image2D inDownscaledTexture;
layout(binding = 2, rgba32f) uniform writeonly image2D outTexture;

layout(push_constant) uniform constants
{
	float filterRadius;
} data;

// Returns a bilinearly-filtered sample at the specified texel position (UV), weighted
// according to the kernel and offset in some direction
vec3 Filter3x3(uvec2 texel, float[9] kernel, float kernelWeight)
{
	// Convert the filter radius to integer coordinates from UV
	ivec2 radius = ivec2(vec2(imageSize(inPrevUpscaledTexture)) * data.filterRadius);

	vec4 result  = imageLoad(inPrevUpscaledTexture, ivec2(texel) + ivec2(-1, -1) + ivec2(-radius.x,  radius.y)) * kernel[0]; // top left
		 result += imageLoad(inPrevUpscaledTexture, ivec2(texel) + ivec2( 0, -1) + ivec2(        0,  radius.y)) * kernel[1]; // top center
		 result += imageLoad(inPrevUpscaledTexture, ivec2(texel) + ivec2( 1, -1) + ivec2( radius.x,  radius.y)) * kernel[2]; // top right

		 result += imageLoad(inPrevUpscaledTexture, ivec2(texel) + ivec2(-1,  0) + ivec2(-radius.x,         0)) * kernel[3]; // middle left
		 result += imageLoad(inPrevUpscaledTexture, ivec2(texel) + ivec2( 0,  0) + ivec2(        0,         0)) * kernel[4]; // middle center
		 result += imageLoad(inPrevUpscaledTexture, ivec2(texel) + ivec2( 1,  0) + ivec2( radius.x,         0)) * kernel[5]; // middle right

		 result += imageLoad(inPrevUpscaledTexture, ivec2(texel) + ivec2(-1,  1) + ivec2(-radius.x, -radius.y)) * kernel[6]; // bottom left
		 result += imageLoad(inPrevUpscaledTexture, ivec2(texel) + ivec2( 0,  1) + ivec2(        0, -radius.y)) * kernel[7]; // bottom center
		 result += imageLoad(inPrevUpscaledTexture, ivec2(texel) + ivec2( 1,  1) + ivec2( radius.x, -radius.y)) * kernel[8]; // bottom right

	return result.rgb / kernelWeight;
}

//
// Bloom implementation based on CoD Advanced Warfare:
// https://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare/
//
// The general process of this upsampling step is to use a 3x3 tent filter from the input samples to
// achieve the blur, and then write the result of that tent filter blur PLUS a direct sample from
// the input image. In this case, the direct sample comes from the downscaled texture, one mip level
// above what is currently being calculated. For example, if a 15x8 image is being upscaled to 30x16,
// then the 30x16 mip level of the downscaled image is selected as the input. 
// This can be summarized as follows, with E being the lowest mip level and A the highest:
// E' = E
// D' = D + blur(E')
// C' = C + blur(D')
// B' = B + blur(C')
// A' = A + blur(B')
//
void main()
{
	uvec2 upper = gl_GlobalInvocationID.xy;
	uvec2 lower = upper >> 1;

	float[9] kernel;
	kernel[0] = 1.0; kernel[1] = 2.0; kernel[2] = 1.0;
	kernel[3] = 2.0; kernel[4] = 4.0; kernel[5] = 2.0;
	kernel[6] = 1.0; kernel[7] = 2.0; kernel[8] = 1.0;

	vec3 directSample = imageLoad(inDownscaledTexture, ivec2(upper)).rgb;
	vec3 filterSample = Filter3x3(lower, kernel, 16.0);

	imageStore(outTexture, ivec2(upper), vec4(filterSample + directSample, 1.0));
}